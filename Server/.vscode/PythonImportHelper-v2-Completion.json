[
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "CREATE_NEW_CONSOLE",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "cx_Freeze",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cx_Freeze",
        "description": "cx_Freeze",
        "detail": "cx_Freeze",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "send",
        "kind": 2,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "def send(client,msg):\n    message = msg.encode(FORMAT)\n    msg_length = len(message)\n    send_length = str(msg_length).encode(FORMAT)\n    send_length += b' ' * (HEADER - len(send_length))\n    try:\n        client.send(send_length)\n        client.send(message)\n    except socket.error:\n        raise socket.error",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "receive",
        "kind": 2,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "def receive(conn): \n    msg = \"\"\n    try:\n        msg_length = conn.recv(HEADER).decode(FORMAT)\n    except socket.error:\n        return \"QUIT\"\n    else:   \n        if msg_length:\n            msg_length = int(msg_length)\n            msg = conn.recv(msg_length).decode(FORMAT)",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "process_menu",
        "kind": 2,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "def process_menu(conn):\n    def xem(conn):\n        list_process = []\n        countProcess = 0\n        for proc in psutil.process_iter():\n            countProcess += 1\n            proc_dict = proc.as_dict(['name','pid','num_threads'])\n            list_process.append(proc_dict)         \n        send(conn,str(countProcess))\n        for proc in list_process:",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "application_menu",
        "kind": 2,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "def application_menu(conn):\n    def xem(conn):\n        list_process = []\n        countProcess = 0\n        str_list = []\n        cmd = 'powershell \"gps | where {$_.MainWindowTitle } | select Description,Id'\n        proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)\n        for line in proc.stdout:\n            if not line.decode()[0].isspace():\n                countProcess += 1",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "handle_client",
        "kind": 2,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "def handle_client(conn,addr):\n    while True:\n        msg = receive(conn)\n        print(msg)\n        if msg == \"KEYLOG\":\n            #keylog()\n            pass\n        elif msg == \"SHUTDOWN\":\n            #shutdown()\n            pass",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "accept_incoming_connections",
        "kind": 2,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "def accept_incoming_connections():\n    try:\n        SERVER.bind(ADDR)\n        SERVER.listen(5)\n        print(f\"Listen on {HOST}\")\n        conn,addr = SERVER.accept()\n    except socket.error:\n        return\n    else:  \n        handle_client(conn,addr)",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "on_closing",
        "kind": 2,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "def on_closing():\n    #SERVER.shutdown(socket.SHUT_RDWR)\n    if SERVER.fileno() != -1:\n        SERVER.close()      \n    root.destroy()  \nroot = tk.Tk()\nroot.title(\"SERVER\")\nroot.geometry(\"200x100\")\nconnect = tk.Button(root,\n          text= \"Mở server\",",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "HOST",
        "kind": 5,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "HOST = socket.gethostbyname(socket.gethostname())\nPORT = 5050\nHEADER = 64\nFORMAT = 'utf-8'\nADDR = (HOST,PORT)\nSERVER = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n#Send message to clients\ndef send(client,msg):\n    message = msg.encode(FORMAT)\n    msg_length = len(message)",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "PORT = 5050\nHEADER = 64\nFORMAT = 'utf-8'\nADDR = (HOST,PORT)\nSERVER = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n#Send message to clients\ndef send(client,msg):\n    message = msg.encode(FORMAT)\n    msg_length = len(message)\n    send_length = str(msg_length).encode(FORMAT)",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "HEADER",
        "kind": 5,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "HEADER = 64\nFORMAT = 'utf-8'\nADDR = (HOST,PORT)\nSERVER = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n#Send message to clients\ndef send(client,msg):\n    message = msg.encode(FORMAT)\n    msg_length = len(message)\n    send_length = str(msg_length).encode(FORMAT)\n    send_length += b' ' * (HEADER - len(send_length))",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "FORMAT",
        "kind": 5,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "FORMAT = 'utf-8'\nADDR = (HOST,PORT)\nSERVER = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n#Send message to clients\ndef send(client,msg):\n    message = msg.encode(FORMAT)\n    msg_length = len(message)\n    send_length = str(msg_length).encode(FORMAT)\n    send_length += b' ' * (HEADER - len(send_length))\n    try:",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "ADDR",
        "kind": 5,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "ADDR = (HOST,PORT)\nSERVER = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n#Send message to clients\ndef send(client,msg):\n    message = msg.encode(FORMAT)\n    msg_length = len(message)\n    send_length = str(msg_length).encode(FORMAT)\n    send_length += b' ' * (HEADER - len(send_length))\n    try:\n        client.send(send_length)",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "SERVER",
        "kind": 5,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "SERVER = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n#Send message to clients\ndef send(client,msg):\n    message = msg.encode(FORMAT)\n    msg_length = len(message)\n    send_length = str(msg_length).encode(FORMAT)\n    send_length += b' ' * (HEADER - len(send_length))\n    try:\n        client.send(send_length)\n        client.send(message)",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "root = tk.Tk()\nroot.title(\"SERVER\")\nroot.geometry(\"200x100\")\nconnect = tk.Button(root,\n          text= \"Mở server\",\n          command = lambda : threading.Thread(target = accept_incoming_connections).start(),\n          height =5,\n          width = 10,\n         )\nconnect.pack()",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "connect",
        "kind": 5,
        "importPath": "Server",
        "description": "Server",
        "peekOfCode": "connect = tk.Button(root,\n          text= \"Mở server\",\n          command = lambda : threading.Thread(target = accept_incoming_connections).start(),\n          height =5,\n          width = 10,\n         )\nconnect.pack()\nroot.protocol(\"WM_DELETE_WINDOW\",on_closing)    \nroot.mainloop()\n# for proc in psutil.process_iter(['type']):",
        "detail": "Server",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "base = None\nif sys.platform == \"win32\":\n    base = \"Win32GUI\"\nexecutables = [cx_Freeze.Executable(\"Server.py\",base=base)]\ncx_Freeze.setup(\n    name = \"Server\",\n    options={\"buile_exe\": {\"packages\": [\"tkinter\",\"psutil\",\"socket\",\"threading\",\"subprocess\"], \"include_files\" : [\"tcl86t.dll\",\"tk86t.dll\"]}}, \n    version = \"0.01\",\n    description = \"Server python interpreter\",\n    executables = executables",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "executables",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "executables = [cx_Freeze.Executable(\"Server.py\",base=base)]\ncx_Freeze.setup(\n    name = \"Server\",\n    options={\"buile_exe\": {\"packages\": [\"tkinter\",\"psutil\",\"socket\",\"threading\",\"subprocess\"], \"include_files\" : [\"tcl86t.dll\",\"tk86t.dll\"]}}, \n    version = \"0.01\",\n    description = \"Server python interpreter\",\n    executables = executables\n)",
        "detail": "setup",
        "documentation": {}
    }
]