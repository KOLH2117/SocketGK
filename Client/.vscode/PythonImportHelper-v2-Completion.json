[
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "tkinter.ttk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter.ttk",
        "description": "tkinter.ttk",
        "detail": "tkinter.ttk",
        "documentation": {}
    },
    {
        "label": "tkinter.font",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter.font",
        "description": "tkinter.font",
        "detail": "tkinter.font",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "send",
        "kind": 2,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "def send(msg):\n    message = msg.encode(FORMAT)\n    msg_length = len(message)\n    send_length = str(msg_length).encode(FORMAT)\n    send_length += b' ' * (HEADER - len(send_length))\n    try:\n        CLIENT.send(send_length)\n        CLIENT.send(message)\n    except socket.error as e:\n        raise socket.error(e)",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "receive",
        "kind": 2,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "def receive():\n    \"\"\"Handles receiving of messages.\"\"\"\n    msg = \"\"\n    try:\n        msg_length = CLIENT.recv(HEADER).decode(FORMAT)\n    except socket.error:\n        raise socket.error\n    except OSError:  # Possibly client has left the chat.\n        raise OSError\n    else:",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "start_connect",
        "kind": 2,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "def start_connect():\n    HOST = ip_input.get()\n    ADDR = (HOST,PORT)\n    try:\n        CLIENT.connect(ADDR)\n    except socket.error:\n        messagebox.showerror(\"Error\",\"Chưa kết nối đến server\")\n        return\n    else:\n        messagebox.showinfo(\"Status\",\"Kết nối đến server thành công\")",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "openNewWindow",
        "kind": 2,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "def openNewWindow():\n    # Toplevel object which will \n    # be treated as a new window\n    newWindow = Toplevel(root)\n    # sets the title of the\n    # Toplevel widget\n    newWindow.title(\"New Window\")\n    return newWindow\ndef process_menu():\n    def Xem():",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "process_menu",
        "kind": 2,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "def process_menu():\n    def Xem():\n        send(\"XEM\")\n        process_list = []\n        n = receive()\n        n = int(n)\n        for i in range(0,n):\n            s1 = receive()\n            s2 = receive()\n            s3 = receive()",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "app_menu",
        "kind": 2,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "def app_menu():\n    def Xem(): \n        send(\"XEM\")\n        process_list = []\n        n = receive()\n        n = int(n)\n        for i in range(0,n):\n            s1 = receive()\n            s2 = receive()\n            s3 = receive()",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "button_process_clicked",
        "kind": 2,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "def button_process_clicked():\n    if len(str(CLIENT).split()) < 9:\n        messagebox.showerror(\"Error\",\"Chưa kết nối đến server\")\n        return \n    send(\"PROCESS\")  \n    process_menu()\ndef app_but_clicked():\n    if len(str(CLIENT).split()) < 9:\n        messagebox.showerror(\"Error\",\"Chưa kết nối đến server\")\n        return ",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "app_but_clicked",
        "kind": 2,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "def app_but_clicked():\n    if len(str(CLIENT).split()) < 9:\n        messagebox.showerror(\"Error\",\"Chưa kết nối đến server\")\n        return \n    send(\"APPLICATION\")  \n    app_menu()\ndef root_closing():\n    if len(str(CLIENT).split()) == 9:\n        try:\n            send(\"QUIT\")",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "root_closing",
        "kind": 2,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "def root_closing():\n    if len(str(CLIENT).split()) == 9:\n        try:\n            send(\"QUIT\")\n        finally:\n            CLIENT.close()\n    root.destroy()\nroot = Tk()\nroot.geometry(\"450x300\")\nip_input = Entry(root,",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "PORT = 5050\nHEADER = 64\nFORMAT = 'utf-8'\nCLIENT = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ndef send(msg):\n    message = msg.encode(FORMAT)\n    msg_length = len(message)\n    send_length = str(msg_length).encode(FORMAT)\n    send_length += b' ' * (HEADER - len(send_length))\n    try:",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "HEADER",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "HEADER = 64\nFORMAT = 'utf-8'\nCLIENT = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ndef send(msg):\n    message = msg.encode(FORMAT)\n    msg_length = len(message)\n    send_length = str(msg_length).encode(FORMAT)\n    send_length += b' ' * (HEADER - len(send_length))\n    try:\n        CLIENT.send(send_length)",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "FORMAT",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "FORMAT = 'utf-8'\nCLIENT = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ndef send(msg):\n    message = msg.encode(FORMAT)\n    msg_length = len(message)\n    send_length = str(msg_length).encode(FORMAT)\n    send_length += b' ' * (HEADER - len(send_length))\n    try:\n        CLIENT.send(send_length)\n        CLIENT.send(message)",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "CLIENT",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "CLIENT = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ndef send(msg):\n    message = msg.encode(FORMAT)\n    msg_length = len(message)\n    send_length = str(msg_length).encode(FORMAT)\n    send_length += b' ' * (HEADER - len(send_length))\n    try:\n        CLIENT.send(send_length)\n        CLIENT.send(message)\n    except socket.error as e:",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "root = Tk()\nroot.geometry(\"450x300\")\nip_input = Entry(root,\n                 text= \"HOST\",\n                 width = 20\n                 )\nip_input.insert(END,\"Nhập IP\")\nip_input.bind(\"<Return>\",lambda args : threading.Thread(target=start_connect).start())\nip_input.place(\n    x =10,y =20,",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "ip_input",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "ip_input = Entry(root,\n                 text= \"HOST\",\n                 width = 20\n                 )\nip_input.insert(END,\"Nhập IP\")\nip_input.bind(\"<Return>\",lambda args : threading.Thread(target=start_connect).start())\nip_input.place(\n    x =10,y =20,\n    width = 300,\n    height =30)",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "enter",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "enter = Button(root,\n               text= \"Kết nối\",\n               command=lambda : threading.Thread(target=start_connect).start()\n               )\nenter.place(x =300+10+10,y =20,\n            width = 70 + 50,\n            height =30\n            )\nprocess_but = Button(root,\n                     text= \"Process Running\",",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "process_but",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "process_but = Button(root,\n                     text= \"Process Running\",\n                     command= button_process_clicked,\n                     )\nprocess_but.place(\n    x =10,y =30+20+10,\n    width = 100,\n    height =220\n    )\napp_but = Button(root,",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "app_but",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "app_but = Button(root,\n                 text= \"App Running\",\n                 command= app_but_clicked,\n                 )\napp_but.place(\n            x =100+10+5,y =30+20+10,\n            width = 300 - 100 - 5,\n            height =70\n              )\nshutdown_but = Button(root,",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "shutdown_but",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "shutdown_but = Button(root,\n                      text = \"Tắt máy\",\n                      command =None\n                      )\nshutdown_but.place(\n                x =100+10+5,y =30+20+10+75,\n                width = 58,\n                height =70\n                )\nscreen_but = Button(root,",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "screen_but",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "screen_but = Button(root,\n                    text = \"Chụp màn hình\", \n                    command = None)\nscreen_but.place(\n            x =100+10+5 + 58 + 5,y =30+20+10+75,\n            width = 132,\n            height =70 \n)\nreg_but = Button(root,\n                 text= \"Sửa Registry\",",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "reg_but",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "reg_but = Button(root,\n                 text= \"Sửa Registry\",\n                 command = None)\nreg_but.place(\n            x =100+10+5,y =30+20+10+75+75,\n            width = 300 - 100 - 5 + 60,\n            height =70\n            )\nkeystroke_but = Button(root,\n                 text= \"Keystroke\",",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "keystroke_but",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "keystroke_but = Button(root,\n                 text= \"Keystroke\",\n                 command = None)\nkeystroke_but.place(\n            x =100+10+10+5+300 - 100 - 5,y =30+20+10,\n            width = 70 + 50,\n            height =70 + 75\n            )\nexit_but = Button(root,\n                  text = \"Thoát\",",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "exit_but",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "exit_but = Button(root,\n                  text = \"Thoát\",\n                  command = None)\nexit_but.place(\n            x =100+10+10+5+300-100 -5 + 60,y =30+20+10 + 75*2,\n            width = (70 + 50) / 2,\n            height =70\n)\nlist_of_main_but = [app_but,process_but]\nroot.protocol(\"WM_DELETE_WINDOW\", root_closing)",
        "detail": "Client",
        "documentation": {}
    },
    {
        "label": "list_of_main_but",
        "kind": 5,
        "importPath": "Client",
        "description": "Client",
        "peekOfCode": "list_of_main_but = [app_but,process_but]\nroot.protocol(\"WM_DELETE_WINDOW\", root_closing)\nroot.mainloop()",
        "detail": "Client",
        "documentation": {}
    }
]